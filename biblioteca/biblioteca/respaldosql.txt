----------------------------------------------------------------
---------------------------------------------------------------
--    1-   INSERTE CREAR TABLAS AQUI

CREATE TABLE categoria (
    id_cate       NUMBER(5) NOT NULL,
    descripcion   VARCHAR2(150) NOT NULL
);

ALTER TABLE categoria ADD CONSTRAINT categoria_pk PRIMARY KEY ( id_cate );

CREATE TABLE detalle_solicitud_prestamo (
    id_solicitud            NUMBER(9) NOT NULL,
    fecha_devolucion        DATE NOT NULL,
    hora_devolucion         DATE NOT NULL,
    fecha_devolucion_real   DATE NOT NULL,
    hora_devolucion_real    DATE NOT NULL,
    id_ejem                 NUMBER(6) NOT NULL,
    isbn                    VARCHAR2(200) NOT NULL,
    numero_solicitud        NUMBER(6) NOT NULL
);

ALTER TABLE detalle_solicitud_prestamo ADD CONSTRAINT detalle_solicitud_prestamo_pk PRIMARY KEY ( id_solicitud );

CREATE TABLE libro (
    isbn                         VARCHAR2(200) NOT NULL,
    titulo                       VARCHAR2(250) NOT NULL,
    autor                        VARCHAR2(250) NOT NULL,
    editorial                    VARCHAR2(250) NOT NULL,
    fecha_publicacion            DATE NOT NULL,
    edicion                      NUMBER(6) NOT NULL,
    categoria_id_cate            NUMBER(5) NOT NULL,
    tipo_documento_id_tipo_doc   NUMBER(5) NOT NULL,
    id_medio                     NUMBER(5) NOT NULL,
    imagen                       BLOB
);

ALTER TABLE libro ADD CONSTRAINT libro_pk PRIMARY KEY ( isbn );


CREATE TABLE ejemplar (
    id_ejem            NUMBER(6) NOT NULL,
    isbn               VARCHAR2(200) NOT NULL,
    estado             VARCHAR2(100) NOT NULL,
    ubicacion          VARCHAR2(100) NOT NULL
);

ALTER TABLE ejemplar ADD CONSTRAINT ejemplar_pk PRIMARY KEY (id_ejem ,isbn);

ALTER TABLE ejemplar
    ADD CONSTRAINT ejemplar_libro_fk FOREIGN KEY ( isbn )
        REFERENCES libro ( isbn );

CREATE TABLE prestamo (
    numero_pres        NUMBER(6) NOT NULL,
    fecha_prestamo     DATE NOT NULL,
    rut_usr            VARCHAR2(9) NOT NULL,
    tipo_prestamo      NUMBER(5) NOT NULL,
    numero_solicitud   NUMBER(6) NOT NULL
);

ALTER TABLE prestamo ADD CONSTRAINT prestamo_pk PRIMARY KEY ( numero_pres );

CREATE TABLE reserva (
    numero_res         NUMBER(6) NOT NULL,
    fecha_reserva      DATE NOT NULL,
    fecha_desde        DATE NOT NULL,
    fecha_hasta        DATE NOT NULL,
    id_ejem            NUMBER(6) NOT NULL,
    isbn               VARCHAR2(200) not null,
    usuario_rut_usr    VARCHAR2(9) NOT NULL
);

ALTER TABLE reserva ADD CONSTRAINT reserva_pk PRIMARY KEY ( numero_res );

CREATE TABLE solicitud_prestamo (
    numero_solicitud   NUMBER(6) NOT NULL,
    fecha_solicitud    DATE NOT NULL,
    hora_solicitud     DATE NOT NULL,
    usuario_rut_usr    VARCHAR2(9) NOT NULL
);

ALTER TABLE solicitud_prestamo ADD CONSTRAINT solicitud_prestamo_pk PRIMARY KEY ( numero_solicitud );

CREATE TABLE tipo_documento (
    id_tipo_doc   NUMBER(5) NOT NULL,
    descripcion   VARCHAR2(150) NOT NULL
);

ALTER TABLE tipo_documento ADD CONSTRAINT tipo_documento_pk PRIMARY KEY ( id_tipo_doc );

CREATE TABLE tipo_prestamo (
    tipo_prestamo_id   NUMBER(6) NOT NULL,
    tipo               VARCHAR2(35) NOT NULL

);

ALTER TABLE tipo_prestamo ADD CONSTRAINT tipo_prestamo_pk PRIMARY KEY ( tipo_prestamo_id );

CREATE TABLE tipo_usuario (
    id_tipo   NUMBER(2) NOT NULL,
    tipo      VARCHAR2(35) NOT NULL
);

ALTER TABLE tipo_usuario ADD CONSTRAINT tipo_usuario_pk PRIMARY KEY ( id_tipo );

CREATE TABLE usuario (
    rut_usr                VARCHAR2(9) NOT NULL,
    nombre                 VARCHAR2(30) NOT NULL,
    apellido_p             VARCHAR2(30) NOT NULL,
    apellido_m             VARCHAR2(30) NOT NULL,
    direccion              VARCHAR2(100) NOT NULL,
    telefono               NUMBER(11) NOT NULL,
    correo                 VARCHAR2(150) NOT NULL,
    foto                   BLOB,
    huella                 BLOB,
    tipo_usuario_id_tipo   NUMBER(2) NOT NULL,
    password               VARCHAR2(20) NOT NULL
);

ALTER TABLE usuario ADD CONSTRAINT usuario_pk PRIMARY KEY ( rut_usr );

ALTER TABLE detalle_solicitud_prestamo
    ADD CONSTRAINT ds_solicitud_ejemplar_fk FOREIGN KEY ( id_ejem , isbn )
        REFERENCES ejemplar ( id_ejem, isbn );

ALTER TABLE detalle_solicitud_prestamo
    ADD CONSTRAINT ds_solicitud_prestamo_fk FOREIGN KEY ( numero_solicitud )
        REFERENCES solicitud_prestamo ( numero_solicitud );


ALTER TABLE libro
    ADD CONSTRAINT libro_categoria_fk FOREIGN KEY ( categoria_id_cate )
        REFERENCES categoria ( id_cate );

ALTER TABLE libro
    ADD CONSTRAINT libro_tipo_documento_fk FOREIGN KEY ( tipo_documento_id_tipo_doc )
        REFERENCES tipo_documento ( id_tipo_doc );

ALTER TABLE prestamo
    ADD CONSTRAINT prestamo_solicitud_prestamo_fk FOREIGN KEY ( numero_solicitud )
        REFERENCES solicitud_prestamo ( numero_solicitud );

ALTER TABLE prestamo
    ADD CONSTRAINT prestamo_tipo_prestamo_fk FOREIGN KEY ( tipo_prestamo )
        REFERENCES tipo_prestamo ( tipo_prestamo_id );

ALTER TABLE prestamo
    ADD CONSTRAINT prestamo_usuario_fk FOREIGN KEY ( rut_usr )
        REFERENCES usuario ( rut_usr );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_ejemplar_fk FOREIGN KEY ( id_ejem , isbn )
        REFERENCES ejemplar ( id_ejem,
        isbn );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_usuario_fk FOREIGN KEY ( usuario_rut_usr )
        REFERENCES usuario ( rut_usr );

ALTER TABLE solicitud_prestamo
    ADD CONSTRAINT solicitud_prestamo_usuario_fk FOREIGN KEY ( usuario_rut_usr )
        REFERENCES usuario ( rut_usr );

ALTER TABLE usuario
    ADD CONSTRAINT usuario_tipo_usuario_fk FOREIGN KEY ( tipo_usuario_id_tipo )
        REFERENCES tipo_usuario ( id_tipo );

-- script para agregrar tipo medio

CREATE TABLE tipo_medio (
    id_medio   NUMBER(5) NOT NULL,
    descripcion   VARCHAR2(150) NOT NULL
);

ALTER TABLE tipo_medio ADD CONSTRAINT tipo_medio_pk PRIMARY KEY ( id_medio );


ALTER TABLE libro
    ADD CONSTRAINT libro_tipo_medio_fk FOREIGN KEY ( id_medio )
        REFERENCES tipo_medio ( id_medio );
----------------------------------------------------------------
---------------------------------------------------------------
--       INSERTE DROP TABLAS (ELIMINAR TABLAS)

drop table detalle_solicitud_prestamo;
drop table prestamo;
drop table reserva;
drop table tipo_prestamo;
drop table solicitud_prestamo;
drop table ejemplar;
drop table libro;
drop table categoria;
drop table tipo_medio;
drop table usuario;
drop table tipo_usuario;
drop table tipo_documento;
----------------------------------------------------------------
---------------------------------------------------------------
--       INSERTE TABLAS MAESTRAS AQUI

INSERT INTO tipo_usuario VALUES (1,'administrador');
INSERT INTO tipo_usuario VALUES (2,'bibliotecario');
INSERT INTO tipo_usuario VALUES (3,'normal');
INSERT INTO tipo_prestamo VALUES (1,'domicilio');
INSERT INTO tipo_prestamo VALUES (2,'sala');
INSERT INTO tipo_documento VALUES (1,'libro');
INSERT INTO tipo_documento VALUES (2,'multimedia');
INSERT INTO tipo_medio VALUES (1,'texto');
INSERT INTO tipo_medio VALUES (2,'casete');
INSERT INTO tipo_medio VALUES (3,'cd');
INSERT INTO tipo_medio VALUES (4,'dvd');
INSERT INTO tipo_medio VALUES (5,'blueray');
INSERT INTO tipo_medio VALUES (6,'vinilo');
INSERT INTO categoria VALUES (1,'documentos técnicos');
INSERT INTO categoria VALUES (2,'audio');
INSERT INTO categoria VALUES (3,'video');
INSERT INTO categoria VALUES (4,'literatura española');
INSERT INTO categoria VALUES (5,'literatura inglesa');
INSERT INTO categoria VALUES (6,'literatura chilena');
INSERT INTO categoria VALUES (7,'Autobiográficos');
INSERT INTO categoria VALUES (8,'científicos');
INSERT INTO categoria VALUES (9,'Autoayuda');
INSERT INTO categoria VALUES (10,'Aventuras');
INSERT INTO categoria VALUES (11,'Cuentos');
INSERT INTO categoria VALUES (12,'deporte');
INSERT INTO categoria VALUES (13,'Humor');
INSERT INTO categoria VALUES (14,'marketing');
INSERT INTO categoria VALUES (15,'Historia');
INSERT INTO categoria VALUES (16,'salud');
INSERT INTO categoria VALUES (17,'suspenso');
INSERT INTO categoria VALUES (18,' videojuegos');
INSERT INTO categoria VALUES (19,'sociedad');
INSERT INTO categoria VALUES (20,'Microrrelatos');
INSERT INTO categoria VALUES (21,'Novela de culto');
INSERT INTO categoria VALUES (22,'Novela de no ficción');
INSERT INTO categoria VALUES (23,'Novela Histórica');
INSERT INTO categoria VALUES (24,'Novela negra');
INSERT INTO categoria VALUES (25,'Novelas');
INSERT INTO categoria VALUES (26,'Novelas Románticas');
COMMIT;
----------------------------------------------------------------
---------------------------------------------------------------
--        INSERTE SEQUENCIAS AQUI

--secuencia para tabla ejemplar
CREATE SEQUENCE seq_ejemplar
  MINVALUE 1
  START WITH 1
  INCREMENT BY 1
  CACHE 20;

----------------------------------------------------------------
---------------------------------------------------------------
--       INSERTE PROCEDIMIENTOS AQUI

---------------------------------------------------------------
--        PROCEDIMIENTOS PARA DOCUMENTOS
---------------------------------------------------------------
-- procedimiento para insert documento
create or replace PROCEDURE p_agregar_documento(
    v_isbn VARCHAR2,
    v_titulo VARCHAR2,
    v_autor VARCHAR2,
    v_editorial VARCHAR2,
    v_fecha DATE,
    v_cat NUMBER,
    v_doc number,
    v_medio number,
    v_edi number,
    v_imagen BLOB,
    v_estado VARCHAR2,
    v_ubi VARCHAR2,
    v_stock NUMBER,
    v_salida out NUMBER
    
)is
BEGIN
    INSERT INTO libro VALUES (v_isbn,v_titulo,v_autor,v_editorial,v_fecha,v_edi,v_cat,v_doc ,v_medio,v_imagen);
    INSERT INTO ejemplar VALUES (seq_ejemplar.NEXTVAL,v_estado,v_ubi,v_stock,v_stock,0,v_isbn);
    COMMIT;
    v_salida:=1;

end;

-- procedimiento para obtener todos los documentos
CREATE or replace PROCEDURE p_lista_documentos(documentos out SYS_REFCURSOR)
IS
BEGIN
    open documentos for SELECT * FROM libro;
END;

-- procedimiento para select filtro documento
create or replace PROCEDURE p_fitro_doc(v_isbn VARCHAR2,documentos out SYS_REFCURSOR)
      IS
      BEGIN
         open documentos for SELECT li.isbn, li.titulo, li.autor,li.editorial,li.edicion, to_char(li.fecha_publicacion,'yyyy-mm-dd'),li.tipo_documento_id_tipo_doc,
         li.categoria_id_cate,li.id_medio,li.imagen, e.ubicacion, e.estado, e.stock FROM libro li JOIN ejemplar e on(li.isbn = e.isbn)where li.isbn = v_isbn;
      END;

create or replace PROCEDURE sp_editar_documento(
    v_isbn VARCHAR2,
    v_titulo VARCHAR2,
    v_autor VARCHAR2,
    v_editorial VARCHAR2,
    v_fecha DATE,
    v_cat NUMBER,
    v_doc number,
    v_medio number,
    v_edi number,
    v_imagen BLOB,
    v_estado VARCHAR2,
    v_ubi VARCHAR2,
    v_stock NUMBER,
    v_salida out NUMBER
    
)is
BEGIN
    UPDATE libro SET titulo = v_titulo, autor = v_autor, editorial = v_editorial, fecha_publicacion= v_fecha, categoria_id_cate = v_cat, 
    tipo_documento_id_tipo_doc = v_doc, id_medio = v_medio, edicion = v_edi, imagen = v_imagen WHERE isbn = v_isbn; 
    UPDATE ejemplar SET estado = v_estado, stock = v_stock , ubicacion = v_ubi WHERE isbn = v_isbn;
    COMMIT;
    v_salida:=1;

---------------------------------------------------------------
--        PROCEDIMIENTOS PARA RESERVA
---------------------------------------------------------------
-- procedimiendo para llamar titulo reserva
create or replace PROCEDURE p_fitro_res(v_isbn VARCHAR2,documentos out SYS_REFCURSOR)
      IS
      BEGIN
         open documentos for SELECT *FROM libro Where isbn = v_isbn;      
      END;

---------------------------------------------------------------
--        PROCEDIMIENTOS PARA CATALOGO
---------------------------------------------------------------
-- Ejecutar cada uno por separado

-- Procedimiento para listar solo libros de audio
create or replace procedure sp_listar_audios(audios out SYS_REFCURSOR)
is

begin
    open audios for select * from libro where id_medio IN(2,6) ;
end;

-- Procedimiento para listar solo libros en video
create or replace procedure sp_listar_videos(videos out SYS_REFCURSOR)
is

begin
    open videos for select * from libro where id_medio IN(3,4,5);
end;

-- Procedimiento para listar solo libros de texto
create or replace procedure sp_listar_libro(libros out SYS_REFCURSOR)
is

begin
    open libros for select * from libro where id_medio = 1;
end;
-----------------------------------------------------------------
*****************************************************************
-----------------------------------------------------------------

---------------------------------------------------------------
--        PROCEDIMIENTOS PARA USUARIOS
---------------------------------------------------------------
-- PROCEDIMIENTO PARA INSERTAR USUARIOS
CREATE OR REPLACE PROCEDURE SP_USUARIO_INSERT (v_rut_usr varchar2, v_nombre varchar2, v_apellido_p varchar2, v_apellido_m varchar2, 
    v_direccion varchar2, v_telefono number, v_correo varchar2, v_foto blob, v_huella blob, v_tipo_usuario_id_tipo number, 
    v_password varchar2, v_salida out number)
AS 
BEGIN
    INSERT INTO usuario
    VALUES (v_rut_usr, v_nombre, v_apellido_p, v_apellido_m, v_direccion, v_telefono, v_correo, v_foto, v_huella, 
            v_tipo_usuario_id_tipo, v_password);
    COMMIT;
    v_salida:=1;

EXCEPTION
    WHEN OTHERS THEN
        v_salida:=0;
END SP_USUARIO_INSERT;

-- PROCEDIMIENTO PARA LISTAR USUARIOS
CREATE OR REPLACE PROCEDURE SP_LISTAR_USUARIOS(usuarios OUT SYS_REFCURSOR)
      IS
      BEGIN
         OPEN usuarios FOR  SELECT U.*
                                    , TU.tipo
                            FROM usuario U
                            INNER JOIN tipo_usuario TU
                                ON (u.tipo_usuario_id_tipo = tu.id_tipo)
                            ORDER BY rut_usr;
      END;

-- PROCEDIMIENTO PARA ELIMINAR USUARIO POR RUT
CREATE OR REPLACE PROCEDURE SP_USUARIO_DELETE (v_rut_usr varchar2)
AS 
BEGIN
    DELETE FROM usuario
    WHERE rut_usr = v_rut_usr;
    COMMIT;
END SP_USUARIO_DELETE;

--PROCEDIMIENTO FILTRAR USUARIO POR RUT
CREATE OR REPLACE PROCEDURE SP_FILTRAR_USUARIO_POR_RUT(v_rut_usr VARCHAR2, usuarios OUT SYS_REFCURSOR)
      IS
      BEGIN
         OPEN usuarios FOR  SELECT U.*
                                    , TU.tipo
                            FROM usuario U
                            INNER JOIN tipo_usuario TU
                                ON (u.tipo_usuario_id_tipo = tu.id_tipo)
                            WHERE u.rut_usr = v_rut_usr;
      END;

-- PROCEDIMIENTO PARA ACTUALIZAR USUARIO
CREATE OR REPLACE PROCEDURE SP_USUARIO_UPDATE (v_rut_usr varchar2, v_nombre varchar2, v_apellido_p varchar2, v_apellido_m varchar2, 
    v_direccion varchar2, v_telefono number, v_correo varchar2, v_foto blob default null, v_huella blob default null, v_tipo_usuario_id_tipo number, 
    v_password varchar2, v_salida out number)

AS 
BEGIN
    UPDATE usuario
    SET     nombre = v_nombre
            , apellido_p = v_apellido_p
            , apellido_m = v_apellido_m
            , direccion = v_direccion
            , telefono = v_telefono
            , correo = v_correo
            , foto = v_foto
            , huella = v_huella
            , tipo_usuario_id_tipo = v_tipo_usuario_id_tipo
            , password = v_password
        WHERE rut_usr = v_rut_usr;
    COMMIT;
    v_salida:=1;

END SP_USUARIO_UPDATE;