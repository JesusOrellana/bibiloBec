----------------------------------------------------------------
---------------------------------------------------------------
--    1-   INSERTE CREAR TABLAS AQUI

    CREATE TABLE categoria (
        id_cate       NUMBER(5) NOT NULL,
        descripcion   VARCHAR2(150) NOT NULL
    );

    ALTER TABLE categoria ADD CONSTRAINT categoria_pk PRIMARY KEY ( id_cate );

    CREATE TABLE detalle_solicitud_prestamo (
        id_solicitud            NUMBER(9) NOT NULL,
        fecha_devolucion        DATE NOT NULL,
        hora_devolucion         DATE NOT NULL,
        fecha_devolucion_real   DATE NOT NULL,
        hora_devolucion_real    DATE NOT NULL,
        id_ejem                 NUMBER(6) NOT NULL,
        isbn                    VARCHAR2(200) NOT NULL,
        numero_solicitud        NUMBER(6) NOT NULL
    );

    ALTER TABLE detalle_solicitud_prestamo ADD CONSTRAINT detalle_solicitud_prestamo_pk PRIMARY KEY ( id_solicitud );

    CREATE TABLE libro (
        isbn                         VARCHAR2(200) NOT NULL,
        titulo                       VARCHAR2(250) NOT NULL,
        autor                        VARCHAR2(250) NOT NULL,
        editorial                    NUMBER(9) NOT NULL,
        fecha_publicacion            DATE NOT NULL,
        edicion                      NUMBER(6) NOT NULL,
        categoria_id_cate            NUMBER(5) NOT NULL,
        tipo_documento_id_tipo_doc   NUMBER(5) NOT NULL,
        id_medio                     NUMBER(5) NOT NULL,
        imagen                       BLOB,
        estado                       NUMBER(1),
    );

    ALTER TABLE libro ADD CONSTRAINT libro_pk PRIMARY KEY ( isbn );

    CREATE TABLE editorial(
        id_editorial                    NUMBER(9) NOT NULL,
        editorial                    VARCHAR2(250) NOT NULL
    );

    ALTER TABLE editorial ADD CONSTRAINT editorial_pk PRIMARY KEY ( id_editorial  );
    
    ALTER TABLE libro
    ADD CONSTRAINT libro_editorial_fk FOREIGN KEY ( editorial )
        REFERENCES editorial(id_editorial);

    CREATE TABLE ejemplar (
        id_ejem            NUMBER(6) NOT NULL,
        isbn               VARCHAR2(200) NOT NULL,
        estado             NUMBER(1) NOT NULL,
        ubicacion          VARCHAR2(100) NOT NULL,
        motivo_des         VARCHAR2(150) 
    );
-------------------------------------
    ALTER TABLE libro add estado NUMBER(1) ;
    ALTER TABLE ejemplar add motivo_des VARCHAR2(150) ;
    ----------------------------------------
    ALTER TABLE ejemplar ADD CONSTRAINT ejemplar_pk PRIMARY KEY (id_ejem ,isbn);

    CREATE TABLE estado_ejem(
        id_estado          NUMBER(1) not null,
        estado             VARCHAR2(30) not null);
        
    ALTER TABLE estado_ejem ADD CONSTRAINT estado_ejem_pk PRIMARY KEY ( id_estado );
         
    ALTER TABLE ejemplar
    ADD CONSTRAINT ejemplar_estado_fk FOREIGN KEY ( estado )
    REFERENCES estado_ejem ( id_estado );

    ALTER TABLE ejemplar
        ADD CONSTRAINT ejemplar_libro_fk FOREIGN KEY ( isbn )
            REFERENCES libro ( isbn );

    CREATE TABLE prestamo (
        numero_pres        NUMBER(6) NOT NULL,
        fecha_prestamo     DATE NOT NULL,
        rut_usr            VARCHAR2(9) NOT NULL,
        tipo_prestamo      NUMBER(5) NOT NULL,
        numero_solicitud   NUMBER(6) NOT NULL,
        estado             NUMBER(1) NOT NULL
    );

    ALTER TABLE prestamo ADD CONSTRAINT prestamo_pk PRIMARY KEY ( numero_pres );

    CREATE TABLE estado_pres (
        id_estado NUMBER(1) NOT NULL,
        estado    VARCHAR2(30) NOT NULL
    );

    ALTER TABLE estado_pres ADD CONSTRAINT estado_pres_pk PRIMARY KEY ( id_estado );

    ALTER TABLE prestamo
        ADD CONSTRAINT prestamo_estado_fk FOREIGN KEY ( estado )
            REFERENCES estado_pres( id_estado );

    CREATE TABLE reserva (
        numero_res         NUMBER(6) NOT NULL,
        fecha_reserva      DATE NOT NULL,
        fecha_desde        DATE NOT NULL,
        fecha_hasta        DATE NOT NULL,
        id_ejem            NUMBER(6) NOT NULL,
        isbn               VARCHAR2(200) not null,
        usuario_rut_usr    VARCHAR2(9) NOT NULL,
        estado             NUMBER(1) 
    );

    ALTER TABLE reserva ADD CONSTRAINT reserva_pk PRIMARY KEY ( numero_res );

    CREATE TABLE estado_res(
            id_estado          NUMBER(1) not null,
            estado             VARCHAR2(30) not null);
            
            ALTER TABLE estado_res ADD CONSTRAINT estado_res_pk PRIMARY KEY ( id_estado );
            
    ALTER TABLE reserva
    ADD CONSTRAINT reserva_estado_fk FOREIGN KEY ( estado )
    REFERENCES estado_res ( id_estado );

    CREATE TABLE solicitud_prestamo (
        numero_solicitud   NUMBER(6) NOT NULL,
        fecha_solicitud    DATE NOT NULL,
        hora_solicitud     DATE NOT NULL,
        usuario_rut_usr    VARCHAR2(9) NOT NULL
    );

    ALTER TABLE solicitud_prestamo ADD CONSTRAINT solicitud_prestamo_pk PRIMARY KEY ( numero_solicitud );

    CREATE TABLE tipo_documento (
        id_tipo_doc   NUMBER(5) NOT NULL,
        descripcion   VARCHAR2(150) NOT NULL
    );

    ALTER TABLE tipo_documento ADD CONSTRAINT tipo_documento_pk PRIMARY KEY ( id_tipo_doc );

    CREATE TABLE tipo_prestamo (
        tipo_prestamo_id   NUMBER(6) NOT NULL,
        tipo               VARCHAR2(35) NOT NULL

    );

    ALTER TABLE tipo_prestamo ADD CONSTRAINT tipo_prestamo_pk PRIMARY KEY ( tipo_prestamo_id );

    CREATE TABLE tipo_usuario (
        id_tipo   NUMBER(2) NOT NULL,
        tipo      VARCHAR2(35) NOT NULL
    );

    ALTER TABLE tipo_usuario ADD CONSTRAINT tipo_usuario_pk PRIMARY KEY ( id_tipo );

    CREATE TABLE usuario (
        rut_usr                VARCHAR2(9) NOT NULL,
        nombre                 VARCHAR2(30) NOT NULL,
        apellido_p             VARCHAR2(30) NOT NULL,
        apellido_m             VARCHAR2(30) NOT NULL,
        direccion              VARCHAR2(100) NOT NULL,
        telefono               NUMBER(11) NOT NULL,
        correo                 VARCHAR2(150) NOT NULL,
        foto                   BLOB,
        huella                 BLOB,
        tipo_usuario_id_tipo   NUMBER(2) NOT NULL,
        password               VARCHAR2(40) NOT NULL,
        activo                 NUMBER(1) DEFAULT 0,
        fecha_activacion       DATE,
        cambio_contrasena      NUMBER(1) DEFAULT 1,
        estado                 NUMBER(1) NOT NULL;
    );

    ALTER TABLE usuario ADD CONSTRAINT usuario_pk PRIMARY KEY ( rut_usr );

    ALTER TABLE detalle_solicitud_prestamo
        ADD CONSTRAINT ds_solicitud_ejemplar_fk FOREIGN KEY ( id_ejem , isbn )
            REFERENCES ejemplar ( id_ejem, isbn );

    ALTER TABLE detalle_solicitud_prestamo
        ADD CONSTRAINT ds_solicitud_prestamo_fk FOREIGN KEY ( numero_solicitud )
            REFERENCES solicitud_prestamo ( numero_solicitud );


    ALTER TABLE libro
        ADD CONSTRAINT libro_categoria_fk FOREIGN KEY ( categoria_id_cate )
            REFERENCES categoria ( id_cate );

    ALTER TABLE libro
        ADD CONSTRAINT libro_tipo_documento_fk FOREIGN KEY ( tipo_documento_id_tipo_doc )
            REFERENCES tipo_documento ( id_tipo_doc );

    ALTER TABLE prestamo
        ADD CONSTRAINT prestamo_solicitud_prestamo_fk FOREIGN KEY ( numero_solicitud )
            REFERENCES solicitud_prestamo ( numero_solicitud );

    ALTER TABLE prestamo
        ADD CONSTRAINT prestamo_tipo_prestamo_fk FOREIGN KEY ( tipo_prestamo )
            REFERENCES tipo_prestamo ( tipo_prestamo_id );

    ALTER TABLE prestamo
        ADD CONSTRAINT prestamo_usuario_fk FOREIGN KEY ( rut_usr )
            REFERENCES usuario ( rut_usr );

    ALTER TABLE reserva
        ADD CONSTRAINT reserva_ejemplar_fk FOREIGN KEY ( id_ejem , isbn )
            REFERENCES ejemplar ( id_ejem,
            isbn );

    ALTER TABLE reserva
        ADD CONSTRAINT reserva_usuario_fk FOREIGN KEY ( usuario_rut_usr )
            REFERENCES usuario ( rut_usr );

    ALTER TABLE solicitud_prestamo
        ADD CONSTRAINT solicitud_prestamo_usuario_fk FOREIGN KEY ( usuario_rut_usr )
            REFERENCES usuario ( rut_usr );

    ALTER TABLE usuario
        ADD CONSTRAINT usuario_tipo_usuario_fk FOREIGN KEY ( tipo_usuario_id_tipo )
            REFERENCES tipo_usuario ( id_tipo );

    -- script para agregrar tipo medio

    CREATE TABLE tipo_medio (
        id_medio   NUMBER(5) NOT NULL,
        descripcion   VARCHAR2(150) NOT NULL
    );

    ALTER TABLE tipo_medio ADD CONSTRAINT tipo_medio_pk PRIMARY KEY ( id_medio );


    ALTER TABLE libro
        ADD CONSTRAINT libro_tipo_medio_fk FOREIGN KEY ( id_medio )
            REFERENCES tipo_medio ( id_medio );

    CREATE TABLE sancion(
        id_sancion    NUMBER(9) not null,
        rut_usr       VARCHAR2(9) NOT NULL,
        id_ejem       NUMBER(6) NOT NULL,   
        isbn          VARCHAR2(200) NOT NULL,
        estado        NUMBER(1) NOT NULL,
        fecha_termino DATE,
        numero_pres   NUMBER(6) NOT NULL
    );

    ALTER TABLE sancion ADD CONSTRAINT sancion_pk PRIMARY KEY (id_sancion);

    CREATE TABLE estado_san (
        id_estado NUMBER(1) NOT NULL,
        estado    VARCHAR2(30) NOT NULL
    );

    ALTER TABLE estado_san ADD CONSTRAINT estado_san_pk PRIMARY KEY ( id_estado );

    ALTER TABLE sancion
        ADD CONSTRAINT sancion_estado_fk FOREIGN KEY ( estado )
            REFERENCES estado_san( id_estado );

    ALTER TABLE sancion
        ADD CONSTRAINT sancion_usuario_fk FOREIGN KEY ( rut_usr )
            REFERENCES usuario ( rut_usr  );
            
    ALTER TABLE sancion
        ADD CONSTRAINT sancion_ejemplar_fk FOREIGN KEY ( id_ejem , isbn )
            REFERENCES ejemplar ( id_ejem,
            isbn );
----------------------------------------------------------------
---------------------------------------------------------------
--       INSERTE DROP TABLAS (ELIMINAR TABLAS)

    DROP TABLE sancion;
    drop table detalle_solicitud_prestamo;
    drop table prestamo;
    drop table reserva;
    drop table tipo_prestamo;
    drop table solicitud_prestamo;
    drop table ejemplar;
    drop table libro;
    drop table usuario;
    drop table categoria;
    drop table tipo_medio;
    drop table tipo_usuario;
    drop table tipo_documento;
----------------------------------------------------------------
---------------------------------------------------------------
--       INSERTE TABLAS MAESTRAS AQUI
    INSERT INTO editorial VALUES (1,'Aguilar');

    INSERT INTO estado_res VALUES (1,'reserva activa');
    INSERT INTO estado_res VALUES (2,'pendiente');
    INSERT INTO estado_res VALUES (3,'cancelado');

    INSERT INTO estado_ejem VALUES (1,'disponible');
    INSERT INTO estado_ejem VALUES (2,'prestamo');
    INSERT INTO estado_ejem VALUES (3,'desactivado');

    INSERT INTO estado_san VALUES (1,'moroso');
    INSERT INTO estado_san VALUES (2,'devolucion');
    INSERT INTO estado_san VALUES (3,'fin sancion');

    INSERT INTO estado_pres VALUES (1,'solicitud');
    INSERT INTO estado_pres VALUES (2,'en prestamo');
    INSERT INTO estado_pres VALUES (3,'cancelado');
    INSERT INTO estado_pres VALUES (4,'devolucion');
    INSERT INTO tipo_usuario VALUES (1,'administrador');
    INSERT INTO tipo_usuario VALUES (2,'bibliotecario');
    INSERT INTO tipo_usuario VALUES (3,'normal');
    INSERT INTO tipo_prestamo VALUES (1,'domicilio');
    INSERT INTO tipo_prestamo VALUES (2,'sala');
    INSERT INTO tipo_documento VALUES (1,'libro');
    INSERT INTO tipo_documento VALUES (2,'multimedia');
    INSERT INTO tipo_medio VALUES (1,'texto');
    INSERT INTO tipo_medio VALUES (2,'casete');
    INSERT INTO tipo_medio VALUES (3,'cd');
    INSERT INTO tipo_medio VALUES (4,'dvd');
    INSERT INTO tipo_medio VALUES (5,'blueray');
    INSERT INTO tipo_medio VALUES (6,'vinilo');
    INSERT INTO categoria VALUES (1,'documentos técnicos');
    INSERT INTO categoria VALUES (2,'audio');
    INSERT INTO categoria VALUES (3,'video');
    INSERT INTO categoria VALUES (4,'literatura española');
    INSERT INTO categoria VALUES (5,'literatura inglesa');
    INSERT INTO categoria VALUES (6,'literatura chilena');
    INSERT INTO categoria VALUES (7,'Autobiográficos');
    INSERT INTO categoria VALUES (8,'científicos');
    INSERT INTO categoria VALUES (9,'Autoayuda');
    INSERT INTO categoria VALUES (10,'Aventuras');
    INSERT INTO categoria VALUES (11,'Cuentos');
    INSERT INTO categoria VALUES (12,'deporte');
    INSERT INTO categoria VALUES (13,'Humor');
    INSERT INTO categoria VALUES (14,'marketing');
    INSERT INTO categoria VALUES (15,'Historia');
    INSERT INTO categoria VALUES (16,'salud');
    INSERT INTO categoria VALUES (17,'suspenso');
    INSERT INTO categoria VALUES (18,' videojuegos');
    INSERT INTO categoria VALUES (19,'sociedad');
    INSERT INTO categoria VALUES (20,'Microrrelatos');
    INSERT INTO categoria VALUES (21,'Novela de culto');
    INSERT INTO categoria VALUES (22,'Novela de no ficción');
    INSERT INTO categoria VALUES (23,'Novela Histórica');
    INSERT INTO categoria VALUES (24,'Novela negra');
    INSERT INTO categoria VALUES (25,'Novelas');
    INSERT INTO categoria VALUES (26,'Novelas Románticas');
    COMMIT;
----------------------------------------------------------------
---------------------------------------------------------------
--        INSERTE SEQUENCIAS AQUI

    --secuencia para tabla ejemplar
    CREATE SEQUENCE seq_ejemplar
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;

    -- secuencia para solicitud_prestamo

    CREATE SEQUENCE seq_solicitud
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;

    -- secuencia para detalle_solicitud_prestamo
    CREATE SEQUENCE seq_deta_solicitud
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;

    -- secuencia para préstamo

    CREATE SEQUENCE seq_prestamo
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;

    -- secuencia para reserva

    CREATE SEQUENCE seq_reserva
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;

    --secuencia para tabla sancion
    CREATE SEQUENCE seq_sansion
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
----------------------------------------------------------------
---------------------------------------------------------------
--       INSERTE PROCEDIMIENTOS AQUI

---------------------------------------------------------------
--        PROCEDIMIENTOS PARA DOCUMENTOS
---------------------------------------------------------------
    -- procedimiento para insert documento
    create or replace PROCEDURE p_agregar_documento(
            v_isbn VARCHAR2,
            v_titulo VARCHAR2,
            v_autor VARCHAR2,
            v_editorial VARCHAR2,
            v_fecha DATE,
            v_cat NUMBER,
            v_doc number,
            v_medio number,
            v_edi number,
            v_imagen BLOB,
            v_ubi VARCHAR2,
            v_stock NUMBER,
            v_salida out NUMBER
            
        )is
        BEGIN
            INSERT INTO libro VALUES (v_isbn,v_titulo,v_autor,v_editorial,v_fecha,v_edi,v_cat,v_doc ,v_medio,v_imagen,1);
            v_salida:=1;
            FOR i IN 1..v_stock LOOP
                INSERT INTO ejemplar VALUES (seq_ejemplar.NEXTVAL,v_isbn,1,v_ubi,'Ingreso '||sysdate);
            END LOOP;
            COMMIT;
        end;


    -- procedimiento para obtener todos los documentos

    create or replace PROCEDURE p_lista_documentos(documentos out SYS_REFCURSOR)
    IS
    BEGIN
        open documentos for SELECT  L.*, 
            c.descripcion,
            e.editorial
    FROM libro L INNER JOIN categoria C 
        ON (l.CATEGORIA_ID_CATE = c.ID_CATE)
        INNER JOIN editorial E
        ON (l.editorial = e.id_editorial)
        WHERE l.estado = 1;
    END;

    -- procedimiento para select filtro documento

    create or replace PROCEDURE p_fitro_doc(v_isbn VARCHAR2,documentos out SYS_REFCURSOR)
        IS
        BEGIN
            open documentos for SELECT li.isbn, li.titulo, li.autor,li.editorial,li.edicion, to_char(li.fecha_publicacion,'yyyy-mm-dd'),li.tipo_documento_id_tipo_doc,
            li.categoria_id_cate,li.id_medio,li.imagen, e.ubicacion, e.estado
            FROM libro li JOIN ejemplar e on(li.isbn = e.isbn)where li.isbn = v_isbn;
        END;


    create or replace PROCEDURE sp_editar_documento(
        v_isbn VARCHAR2,
        v_titulo VARCHAR2,
        v_autor VARCHAR2,
        v_editorial VARCHAR2,
        v_fecha DATE,
        v_cat NUMBER,
        v_doc number,
        v_medio number,
        v_edi number,
        v_imagen BLOB,
        v_ubi VARCHAR2,
        V_opcion varchar2,
        v_salida out NUMBER
        
    )is
    BEGIN
        IF v_opcion = 'a' THEN
            UPDATE libro SET titulo = v_titulo, autor = v_autor, editorial = v_editorial, fecha_publicacion= v_fecha, categoria_id_cate = v_cat, 
            tipo_documento_id_tipo_doc = v_doc, id_medio = v_medio, edicion = v_edi, imagen = v_imagen WHERE isbn = v_isbn; 

            UPDATE ejemplar SET ubicacion = v_ubi WHERE isbn = v_isbn;
            COMMIT;
        ELSE
            UPDATE libro SET titulo = v_titulo, autor = v_autor, editorial = v_editorial, fecha_publicacion= v_fecha, categoria_id_cate = v_cat, 
            tipo_documento_id_tipo_doc = v_doc, id_medio = v_medio, edicion = v_edi WHERE isbn = v_isbn; 
            UPDATE ejemplar SET ubicacion = v_ubi WHERE isbn = v_isbn;
            COMMIT;
        END IF;


        v_salida:=1;

    end;

    -- PROCEDIMIENTO ELIMINAR EJEMPLARES--
    create or replace PROCEDURE sp_delete_ejemplar(
    v_isbn VARCHAR2,
    v_ejem NUMBER,
    v_opcion NUMBER
    ) 
    IS
    BEGIN
        IF v_opcion = 1 
        THEN
            DELETE FROM ejemplar WHERE isbn = v_isbn;
            DELETE FROM libro WHERE isbn = v_isbn;
        ELSIF v_opcion = 2
        THEN
            DELETE FROM ejemplar WHERE id_ejem = v_ejem;
        END IF;
    commit;
    END sp_delete_ejemplar;

    -- PROCEDIMIENTO PARA CONTAR EL NUMERO DE EJEMPLARES
    create or replace PROCEDURE sp_num_ejem(v_isbn VARCHAR2 ,disponible out SYS_REFCURSOR)
        IS
        BEGIN
            open disponible for SELECT count(id_ejem) as stock FROM ejemplar WHERE isbn = v_isbn;
        END;

    -- PROCEDURE PARA ACTUALIZAR STOCK --
    create or replace PROCEDURE sp_update_stock(
    v_isbn VARCHAR2,
    v_stock NUMBER,
    v_ubi VARCHAR2
    ) 
    IS
    BEGIN
        FOR i IN 1..v_stock LOOP
            INSERT INTO ejemplar VALUES (seq_ejemplar.NEXTVAL,v_isbn,1,v_ubi);
        END LOOP;
    END;

    -- procedure para desactivar ejemplar
    create or replace PROCEDURE sp_desactivar_ejemplar(
    v_isbn VARCHAR2,
    v_ejem NUMBER,
    v_opcion NUMBER,
    v_motivo VARCHAR2
    ) 
    IS
    BEGIN
        IF v_opcion = 1 
        THEN
            UPDATE libro SET estado = 2 WHERE isbn = v_isbn;
            UPDATE ejemplar SET estado = 3, motivo_des = 'documento desactivado'
            WHERE isbn = v_isbn;
        ELSIF v_opcion = 2
        THEN
            UPDATE ejemplar SET estado = 3, motivo_des = v_motivo
            WHERE id_ejem = v_ejem;
        END IF;
    commit;
    END;
---------------------------------------------------------------
--        PROCEDIMIENTOS PARA SANSION
---------------------------------------------------------------
    --procedimiento conteo de prestamos con sancion
    create or replace PROCEDURE sp_cont_sansion(v_rut  VARCHAR2, v_ejem NUMBER, cont OUT SYS_REFCURSOR)
      IS
      BEGIN
         OPEN cont FOR  SELECT
            COUNT(id_sancion)
        FROM sancion WHERE rut_usr = v_rut and id_ejem = v_ejem and estado = 1;
      END;


    --procedimiento calculo de sancion
    create or replace PROCEDURE sp_calcular_sansion(v_rut VARCHAR2,v_ejem number,v_isbn VARCHAR2,v_num number)
        is
    BEGIN
        INSERT INTO sancion VALUES(SEQ_SANSION.nextval,v_rut,v_ejem,v_isbn,1,(sysdate+1),v_num);
        COMMIT;
    end;


    --procedimiento conteo prestamos con snacion por rut
    create or replace PROCEDURE sp_cont_sansionRut(v_rut  VARCHAR2,cont OUT SYS_REFCURSOR)
      IS
      BEGIN
         OPEN cont FOR  SELECT COUNT(id_sancion), estado,MAX(to_char(fecha_termino,'dd/mm/yyyy'))
        FROM sancion WHERE rut_usr = v_rut
        GROUP BY rut_usr, estado
        ORDER BY MAX(to_char(fecha_termino,'dd/mm/yyyy')) DESC;

      END;

    -- PROCEDURE PARA TERMINAR SANCION --
    create or replace PROCEDURE sp_fin_sancion(v_rut  VARCHAR2)
      IS
      BEGIN
        UPDATE sancion set estado = 3 WHERE rut_usr = v_rut;
        COMMIT;
      END;
---------------------------------------------------------------
--        PROCEDIMIENTOS PARA SOLICITUD_PRESTAMO
---------------------------------------------------------------


    -- devoluciones prestamos
    create or replace PROCEDURE SP_DEVOLUCION_DOC(v_id_ejem VARCHAR2,v_num_pres VARCHAR2)
        IS
        BEGIN
                UPDATE ejemplar set estado = 1 WHERE id_ejem = v_id_ejem;
                UPDATE prestamo set estado = 3 WHERE numero_pres = v_num_pres;
                UPDATE sancion set estado = 2 ,fecha_termino =(sysdate+2) 
                WHERE numero_pres = v_num_pres;
                COMMIT;
        END;


    -- proceso solicitud
    create or replace PROCEDURE p_solicitud_prestamo(
        v_rut VARCHAR2,
        v_ejem number,
        v_isbn VARCHAR2,
        v_tipo varchar2,
        v_fecha VARCHAR2,
        v_proceso VARCHAR2
        )
        is
    BEGIN
        IF v_proceso = 's' THEN
            INSERT INTO solicitud_prestamo VALUES (seq_solicitud.NEXTVAL,sysdate,sysdate,v_rut);
            IF v_tipo = 'd' THEN
                INSERT INTO prestamo VALUES(SEQ_PRESTAMO.nextval, v_fecha,v_rut,1,seq_solicitud.NEXTVAL-1,1);
                INSERT INTO detalle_solicitud_prestamo VALUES (SEQ_DETA_SOLICITUD.nextval,sysdate+5,sysdate+5,sysdate+6,sysdate+6,v_ejem,v_isbn,seq_solicitud.NEXTVAL-2);
                UPDATE ejemplar SET estado = 2 WHERE id_ejem = v_ejem;
            ELSE
                INSERT INTO prestamo VALUES(SEQ_PRESTAMO.nextval, v_fecha,v_rut,2,seq_solicitud.NEXTVAL-1,1);
                INSERT INTO detalle_solicitud_prestamo VALUES (SEQ_DETA_SOLICITUD.nextval,(sysdate+3/24),(sysdate +3/24),(sysdate +4/24),(sysdate +4 / 24),v_ejem,v_isbn,seq_solicitud.NEXTVAL-2);
                UPDATE ejemplar SET estado = 2 WHERE id_ejem = v_ejem;
            END IF;
            COMMIT;
        ELSIF v_proceso = 'p' THEN
            UPDATE prestamo set estado = 2 WHERE numero_pres = v_rut;
            COMMIT;
        ELSIF v_proceso = 'c' THEN
            UPDATE prestamo set estado = 3 WHERE numero_pres = v_rut;
            UPDATE ejemplar set estado = 1 WHERE id_ejem = v_ejem;

        END IF;
    end;

    -- procedimento para traer un ejemplar disponible
    create or replace PROCEDURE sp_ejemplar(v_isbn varchar2,v_opcion NUMBER,disponible out SYS_REFCURSOR)
        IS
        BEGIN
            IF v_opcion = 1
            THEN
                open disponible for SELECT id_ejem FROM ejemplar where estado = 1 and rownum <= 1 and isbn = v_isbn;
            ELSIF v_opcion = 2
            THEN
                open disponible for SELECT e.id_ejem,e.estado,ee.estado ,(COUNT(d.id_solicitud) + COUNT(r.numero_res))
                FROM ejemplar e 
                JOIN estado_ejem ee on(ee.id_estado = e.estado)
                left JOIN detalle_solicitud_prestamo d on(e.id_ejem = d.id_ejem)
                left JOIN reserva r on(r.id_ejem = e.id_ejem)
                where e.isbn = v_isbn
                GROUP BY e.id_ejem,e.estado,ee.estado;
            END IF;
        END sp_ejemplar;

    -- procedimiento ejemplares que estubieron en prestamos 
    create or replace PROCEDURE sp_num_presta(v_isbn VARCHAR2 ,disponible out SYS_REFCURSOR)
        IS
        BEGIN
            open disponible for SELECT
            (COUNT(d.id_solicitud) + COUNT(r.numero_res)) as Esprestamo
            FROM libro l 
            JOIN detalle_solicitud_prestamo d on(l.isbn = d.isbn)
            left JOIN reserva r on(r.isbn = l.isbn)
            where d.isbn = v_isbn or r.isbn = v_isbn;
        END;

    -- procedimento para contar los ejemplares disponibles --
    create or replace PROCEDURE sp_num_ejemplar_disponible(v_isbn varchar2,disponible out SYS_REFCURSOR)
    IS
    BEGIN
    open disponible for SELECT count(id_ejem) as stock FROM ejemplar WHERE estado = 1 and isbn = v_isbn
    GROUP BY isbn;
    END sp_num_ejemplar_disponible;

    -- registro de prestamos -------------
            
    create or replace PROCEDURE sp_prestamos(prestamos out SYS_REFCURSOR)
    IS
    BEGIN
    open prestamos for  SELECT
        u.rut_usr, u.nombre || ' ' || u.apellido_p as nombre ,tp.tipo, l.titulo , l.autor, l.editorial , td.descripcion, 
        c.descripcion , to_char(sp.fecha_solicitud,'dd/mm/yyyy HH24:MI:ss')as "fecha y hora solicitud",
        to_char(sp.fecha_solicitud,'HH24:MI:ss') as "hora solicitud",to_char(dsp.fecha_devolucion,'dd/mm/yyyy HH24:MI:ss')as "fecha y hora devolucion",
        to_char(dsp.fecha_devolucion,'HH24:MI:ss') as "hora devolucion", dsp.fecha_devolucion - sp.fecha_solicitud , p.numero_pres, dsp.id_ejem, p.estado,
        to_char(p.fecha_prestamo,'ddmmyyyyHH24MIss'),dsp.fecha_devolucion - sysdate , l.isbn,
        edit.editorial, ep.estado
        FROM libro l join detalle_solicitud_prestamo dsp on(l.isbn = dsp.isbn)
        JOIN solicitud_prestamo sp on(sp.numero_solicitud = dsp.numero_solicitud)
        JOIN prestamo p on(p.numero_solicitud = sp.numero_solicitud)
        JOIN usuario u on(u.rut_usr = sp.usuario_rut_usr)
        JOIN tipo_prestamo tp on(tp.tipo_prestamo_id = p.tipo_prestamo)
        JOIN tipo_documento td on(td.id_tipo_doc = l.tipo_documento_id_tipo_doc)
        JOIN categoria c on(c.id_cate = l.categoria_id_cate)
        JOIN editorial edit on (l.editorial = edit.id_editorial)
        JOIN estado_pres ep on (p.estado = ep.id_estado)
        WHERE p.estado = 2 or p.estado = 1;
    END;

    --PROCEDIMIENTO PARA FILTRAR PRESTAMO POR NUMERO DE PRESTAMO
    create or replace PROCEDURE SP_PRESTAMO_FILTRADO(v_numero_pres VARCHAR2, prestamo OUT SYS_REFCURSOR)
        IS
        BEGIN
            OPEN prestamo FOR  SELECT  p.numero_pres,
                                        u.rut_usr, u.nombre || ' ' || u.apellido_p as nombre,
                                        u.correo,
                                        tp.tipo, 
                                        l.titulo, 
                                        l.autor, 
                                        to_char(p.fecha_prestamo,'dd/mm/yyyy HH24:MI:ss'),
                                        to_char(dsp.fecha_devolucion,'dd/mm/yyyy HH24:MI:ss'),
                                        CASE 
                                        WHEN tp.tipo = 'domicilio' THEN
                                        ROUND(TO_NUMBER(dsp.fecha_devolucion - sysdate))
                                        WHEN tp.tipo = 'sala' THEN
                                        TRUNC(TO_NUMBER((CAST( dsp.fecha_devolucion AS DATE ) - CAST( sysdate AS DATE )) * 1440))
                                        END AS "VENCIMIENTO",
                                        tp.tipo_prestamo_id
                                FROM libro l join detalle_solicitud_prestamo dsp on(l.isbn = dsp.isbn)
                                JOIN solicitud_prestamo sp on(sp.numero_solicitud = dsp.numero_solicitud)
                                JOIN prestamo p on(p.numero_solicitud = sp.numero_solicitud)
                                JOIN usuario u on(u.rut_usr = sp.usuario_rut_usr)
                                JOIN tipo_prestamo tp on(tp.tipo_prestamo_id = p.tipo_prestamo)
                                WHERE p.numero_pres = v_numero_pres;
        END SP_PRESTAMO_FILTRADO;


    -- SP FILTRA PRESTAMO POR RUT (API)
    create or replace PROCEDURE SP_PRESTAMO_FILTRADO_RUT_USR(v_rut_usr VARCHAR2, prestamo OUT SYS_REFCURSOR)
      IS
      BEGIN
         OPEN prestamo FOR  SELECT
        u.rut_usr, u.nombre || ' ' || u.apellido_p as nombre ,tp.tipo, l.titulo , l.autor, l.editorial , td.descripcion, 
        c.descripcion , to_char(sp.fecha_solicitud,'dd/mm/yyyy HH24:MI:ss')as "fecha y hora solicitud",
        to_char(sp.fecha_solicitud,'HH24:MI:ss') as "hora solicitud",to_char(dsp.fecha_devolucion,'dd/mm/yyyy HH24:MI:ss')as "fecha y hora devolucion",
        to_char(dsp.fecha_devolucion,'HH24:MI:ss') as "hora devolucion", dsp.fecha_devolucion - sp.fecha_solicitud , p.numero_pres, dsp.id_ejem, p.estado,
        to_char(p.fecha_prestamo,'ddmmyyyyHH24MIss'),dsp.fecha_devolucion - sysdate , l.isbn,
        edit.editorial, ep.estado
        FROM libro l join detalle_solicitud_prestamo dsp on(l.isbn = dsp.isbn)
        JOIN solicitud_prestamo sp on(sp.numero_solicitud = dsp.numero_solicitud)
        JOIN prestamo p on(p.numero_solicitud = sp.numero_solicitud)
        JOIN usuario u on(u.rut_usr = sp.usuario_rut_usr)
        JOIN tipo_prestamo tp on(tp.tipo_prestamo_id = p.tipo_prestamo)
        JOIN tipo_documento td on(td.id_tipo_doc = l.tipo_documento_id_tipo_doc)
        JOIN categoria c on(c.id_cate = l.categoria_id_cate)
        JOIN editorial edit on (l.editorial = edit.id_editorial)
        JOIN estado_pres ep on (p.estado = ep.id_estado)
                        WHERE u.rut_usr = v_rut_usr;
      END SP_PRESTAMO_FILTRADO_RUT_USR;
      
    -------------------- comprobante solicitud 
    create or replace PROCEDURE sp_comprobante_pres(v_rut varchar2,v_fecha varchar,comprobante out SYS_REFCURSOR)
        IS
            
        BEGIN
            OPEN comprobante FOR SELECT
                                p.numero_pres,u.correo, u.nombre,u.rut_usr,dsp.id_ejem,l.titulo,
                                to_char(sp.fecha_solicitud,'dd/mm/yyyy HH24:MI:ss')as "fecha y hora solicitud",
                                to_char(dsp.fecha_devolucion,'dd/mm/yyyy HH24:MI:ss')as "fecha y hora devolucion", tp.tipo,
                                l.autor
                                FROM libro l join detalle_solicitud_prestamo dsp on(l.isbn = dsp.isbn)
                                JOIN solicitud_prestamo sp on(sp.numero_solicitud = dsp.numero_solicitud)
                                JOIN prestamo p on(p.numero_solicitud = sp.numero_solicitud)
                                JOIN usuario u on(u.rut_usr = sp.usuario_rut_usr)
                                JOIN tipo_prestamo tp on(tp.tipo_prestamo_id = p.tipo_prestamo)
                                JOIN tipo_documento td on(td.id_tipo_doc = l.tipo_documento_id_tipo_doc)
                                JOIN categoria c on(c.id_cate = l.categoria_id_cate)
                                WHERE u.rut_usr = v_rut and to_char(p.fecha_prestamo,'ddmmyyyyHH24MIss') = v_fecha;
        END;

---------------------------------------------------------------
--        PROCEDIMIENTOS PARA RESERVA
---------------------------------------------------------------
    -- procedimiendo para llamar titulo reserva
    create or replace PROCEDURE p_fitro_res(v_isbn VARCHAR2,documentos out SYS_REFCURSOR)
        IS
        BEGIN
            open documentos for SELECT *FROM libro l join ejemplar e on(l.isbn=e.isbn) Where l.isbn = v_isbn;      
        END;

    --procedimiento para tener fecha mas proxima para reservar
    create or replace PROCEDURE fecha_reserva_valida(v_isbn VARCHAR2 ,prestamos out SYS_REFCURSOR)
    IS
    BEGIN
    open prestamos for  SELECT
    MIN(to_char(dsp.fecha_devolucion,'yyyy-mm-dd'))as "fecha devolucion"
        FROM libro l join detalle_solicitud_prestamo dsp on(l.isbn = dsp.isbn)
        JOIN solicitud_prestamo sp on(sp.numero_solicitud = dsp.numero_solicitud)
        JOIN prestamo p on(p.numero_solicitud = sp.numero_solicitud)
        JOIN usuario u on(u.rut_usr = sp.usuario_rut_usr)
        JOIN tipo_prestamo tp on(tp.tipo_prestamo_id = p.tipo_prestamo)
        JOIN tipo_documento td on(td.id_tipo_doc = l.tipo_documento_id_tipo_doc)
        JOIN categoria c on(c.id_cate = l.categoria_id_cate)
        WHERE p.estado = 2 or p.estado = 1 and l.isbn = v_isbn;
    END;

    --procedimiento para confirmar reserva
    --procedimiento para ver reserva en solicitud

    create or replace PROCEDURE reserva_creada(v_isbn VARCHAR2,v_id_ejem number, v_fecha_d date, v_fecha_h date, v_rut_u VARCHAR2)
        IS
        BEGIN
            INSERT INTO reserva values (SEQ_RESERVA.nextval,sysdate,v_fecha_d,v_fecha_h,v_id_ejem,v_isbn,v_rut_u,2);
            COMMIT;
        END;
        
    --procedimiento para mostrar en lista de solicitudes  
        
    create or replace PROCEDURE sp_lista_reserva(reserva out SYS_REFCURSOR)
    IS
    BEGIN
    open reserva for  
            SELECT
            r.numero_res,
            u.rut_usr, u.nombre || ' ' || u.apellido_p as nombre ,'reserva', l.titulo , l.autor, td.descripcion, 
            to_char(r.fecha_desde,'dd/mm/yyyy HH24:MI:ss')as "fecha solicitud",
            to_char(r.fecha_hasta,'dd/mm/yyyy HH24:MI:ss')as "fecha devolucion",r.estado,
            to_char(r.fecha_desde,'dd/mm/yyyy')as "fecha",
            r.isbn,r.id_ejem


            FROM libro l join reserva r on(l.isbn = r.isbn)
            JOIN usuario u on(u.rut_usr = r.usuario_rut_usr)
            JOIN tipo_documento td on(td.id_tipo_doc = l.tipo_documento_id_tipo_doc)
            JOIN categoria c on(c.id_cate = l.categoria_id_cate)
            WHERE r.estado = 2 ;

    END;

    --procedimiento de botones aceptar reserva  
    create or replace PROCEDURE p_solicitud_reserva(
        v_rut VARCHAR2,
        v_ejem number,
        v_isbn VARCHAR2,
        v_fecha VARCHAR2,
        v_proceso VARCHAR2,
        v_res number,
        v_fecha_desde date,
        v_fecha_hasta date
        )
        is
    BEGIN
        IF v_proceso = 'r' THEN
            INSERT INTO solicitud_prestamo VALUES (seq_solicitud.NEXTVAL,sysdate,sysdate,v_rut);
            INSERT INTO prestamo VALUES(SEQ_PRESTAMO.nextval, v_fecha,v_rut,1,seq_solicitud.NEXTVAL-1,2);
            INSERT INTO detalle_solicitud_prestamo VALUES (SEQ_DETA_SOLICITUD.nextval,sysdate+5,sysdate+5,sysdate+6,sysdate+6,v_ejem,v_isbn,seq_solicitud.NEXTVAL-2);
            UPDATE ejemplar SET estado = 2 WHERE id_ejem = v_ejem;
            UPDATE reserva SET estado = 1 WHERE numero_res = v_res;
            COMMIT;

        ELSIF v_proceso = 'c' THEN
            UPDATE reserva set estado = 3 WHERE numero_res = v_res;
            COMMIT;

        END IF;
    end;

    --procedimiento para cancelar reserva
    
    create or replace PROCEDURE sp_cancelar_res(v_res_can number)
      IS
         
      BEGIN
          UPDATE reserva SET estado = 3
          WHERE numero_res = v_res_can;
          COMMIT;
      END;

        
---------------------------------------------------------------
--        PROCEDIMIENTOS PARA CATALOGO
---------------------------------------------------------------
    -- Ejecutar cada uno por separado

    -- Procedimiento para listar solo libros de audio
    create or replace procedure sp_listar_audios(audios out SYS_REFCURSOR)
    is

    begin
        open audios for SELECT  L.*, 
            c.descripcion 
    FROM libro L INNER JOIN categoria C 
        ON (l.CATEGORIA_ID_CATE = c.ID_CATE)
        where id_medio IN(2,6) and 
        l.estado = 1;
    end;

    -- Procedimiento para listar solo libros en video
        create or replace procedure sp_listar_videos(videos out SYS_REFCURSOR)
    is

    begin
        open videos for SELECT  L.*, 
            c.descripcion 
    FROM libro L INNER JOIN categoria C 
        ON (l.CATEGORIA_ID_CATE = c.ID_CATE) where id_medio IN(3,4,5) and 
        l.estado = 1;
    end;

    -- Procedimiento para listar solo libros de texto
    create or replace procedure sp_listar_libro(libros out SYS_REFCURSOR)
    is

    begin
        open libros for SELECT  L.*, 
            c.descripcion 
    FROM libro L INNER JOIN categoria C 
        ON (l.CATEGORIA_ID_CATE = c.ID_CATE) where id_medio = 1 and 
        l.estado = 1;
    end;
-----------------------------------------------------------------
*****************************************************************
-----------------------------------------------------------------

---------------------------------------------------------------
--        PROCEDIMIENTOS PARA USUARIOS
---------------------------------------------------------------
    -- PROCEDIMIENTO PARA INSERTAR USUARIOS
    create or replace PROCEDURE SP_USUARIO_INSERT (v_rut_usr varchar2, v_nombre varchar2, v_apellido_p varchar2, v_apellido_m varchar2, 
        v_direccion varchar2, v_telefono number, v_correo varchar2, v_foto blob, v_huella blob, v_tipo_usuario_id_tipo number, 
        v_password varchar2, v_salida out number)
    AS 
    BEGIN
        INSERT INTO usuario
        VALUES (v_rut_usr, v_nombre, v_apellido_p, v_apellido_m, v_direccion, v_telefono, v_correo, v_foto, v_huella, 
                v_tipo_usuario_id_tipo, v_password, 0, null, 1, 1);
        COMMIT;
        v_salida:=1;

    EXCEPTION
        WHEN OTHERS THEN
            v_salida:=0;
    END SP_USUARIO_INSERT;

    -- PROCEDIMIENTO PARA LISTAR USUARIOS
    CREATE OR REPLACE PROCEDURE SP_LISTAR_USUARIOS(usuarios OUT SYS_REFCURSOR)
        IS
        BEGIN
            OPEN usuarios FOR  SELECT U.*
                                        , TU.tipo
                                        , u. nombre ||' '|| u.apellido_p ||' '|| u.apellido_m as nombre_completo
                                FROM usuario U
                                INNER JOIN tipo_usuario TU
                                    ON (u.tipo_usuario_id_tipo = tu.id_tipo)
                                ORDER BY rut_usr;
        END;

    -- PROCEDIMIENTO PARA ELIMINAR USUARIO POR RUT
    create or replace PROCEDURE SP_USUARIO_DELETE (v_rut_usr varchar2)
    AS 
    BEGIN
        UPDATE usuario
        SET estado = 0
        WHERE rut_usr = v_rut_usr;
        COMMIT;
    END SP_USUARIO_DELETE;

    --PROCEDIMIENTO FILTRAR USUARIO POR RUT
    CREATE OR REPLACE PROCEDURE SP_FILTRAR_USUARIO_POR_RUT(v_rut_usr VARCHAR2, usuarios OUT SYS_REFCURSOR)
        IS
        BEGIN
            OPEN usuarios FOR  SELECT U.*
                                        , TU.tipo
                                FROM usuario U
                                INNER JOIN tipo_usuario TU
                                    ON (u.tipo_usuario_id_tipo = tu.id_tipo)
                                WHERE u.rut_usr = v_rut_usr;
        END;

    -- PROCEDIMIENTO PARA ACTUALIZAR USUARIO
    create or replace PROCEDURE SP_USUARIO_UPDATE (v_rut_usr varchar2, v_nombre varchar2, v_apellido_p varchar2, v_apellido_m varchar2, 
        v_direccion varchar2, v_telefono number, v_correo varchar2, v_foto blob default null, v_huella blob default null, v_tipo_usuario_id_tipo number, v_salida out number)

    AS 
    BEGIN
        UPDATE usuario
        SET     nombre = v_nombre
                , apellido_p = v_apellido_p
                , apellido_m = v_apellido_m
                , direccion = v_direccion
                , telefono = v_telefono
                , correo = v_correo
                , foto = v_foto
                , huella = v_huella
                , tipo_usuario_id_tipo = v_tipo_usuario_id_tipo
            WHERE rut_usr = v_rut_usr;
        COMMIT;
        v_salida:=1;

    END SP_USUARIO_UPDATE;

    --PROCEDIMIENTO PARA ACTUALIZAR ESTADO ACTIVO
    create or replace PROCEDURE SP_USUARIO_UPDATE_ACTIVO (v_rut_usr varchar2)

    AS 
    BEGIN
        UPDATE usuario
        SET     activo = 1,
                fecha_activacion = SYSDATE
            WHERE rut_usr = v_rut_usr;
        COMMIT;

    END SP_USUARIO_UPDATE_ACTIVO;

    --PROCEDIMIENTO PARA ACTUALIZAR CONTRASEÑA
    create or replace PROCEDURE SP_USUARIO_UPDATE_PASSWORD (v_rut_usr varchar2, v_password varchar2, v_salida out number)

    AS 
    BEGIN
        UPDATE usuario
        SET    password = v_password,
                cambio_contrasena = 0
            WHERE rut_usr = v_rut_usr;
        COMMIT;
        v_salida:=1;


    END SP_USUARIO_UPDATE_PASSWORD;


--SCRIPT PARA INSERTAR UN USUARIO ADMINISTRADOR
INSERT INTO usuario VALUES('111111111','Administrador',' ',' ','Dirección 123',999999999,'correo@gmail.com',NULL,NULL,1,'81dc9bdb52d04dc20036dbd8313ed055',1,sysdate,1);
COMMIT;